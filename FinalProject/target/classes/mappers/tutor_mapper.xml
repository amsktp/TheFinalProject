<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
 "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.englishvillage.member.tutor">
	
	<sql id="search">
		<choose>
        	<when test="countrySearch != 'all'">
        		AND MEMBER_COUNTRY = #{countrySearch}
        	</when>
        	
        	<when test="ageSearch != 0">
	        	<![CDATA[
 	        		AND (CEIL((SYSDATE-MEMBER_BIRTH_DATE)/360) >= #{ageSearch} 
 	            	AND CEIL((SYSDATE-MEMBER_BIRTH_DATE)/360) < #{ageSearch}  + 10) 
	            ]]>
        	</when>
        	
        	<when test="genderSearch != 'all'">
        		AND MEMBER_GENDER = #{genderSearch}
        	</when>
        	
        	<when test="keyword != ''">
        		AND MEMBER_NAME LIKE '%' || #{keyword} || '%'
        	</when>
        </choose>
	</sql>
	
	
	<resultMap type="com.englishvillage.member.tutor.model.TutorDto" 
		id="tutorResultMap">
		
		<result column="MEMBER_NO" property="memberNo"/>
		<result column="MEMBER_GRADE" property="memberGrade"/>
		<result column="MEMBER_EMAIL" property="memberEmail"/>
		<result column="MEMBER_PASSWORD" property="memberPassword"/>
		<result column="MEMBER_NAME" property="memberName"/>
		<result column="MEMBER_CREATE_DATE" property="memberCreateDate"
			javaType="java.util.Date"/>
		<result column="MEMBER_MODIFY_DATE" property="memberModifyDate"
			javaType="java.util.Date"/>
		<result column="MEMBER_COUNTRY" property="memberCountry"	/>
		<result column="MEMBER_GENDER" property="memberGender"	/>
		<result column="MEMBER_BIRTH_DATE" property="memberBirthDate"
			javaType="java.util.Date"/>
		<result column="MEMBER_POINT" property="memberPoint"	/>
		
		<result column="TUTOR_INTRODUCE" property="tutorIntroduce"	/>
		<result column="YOUTUBE_URL" property="youtubeUrl"/>	
		<result column="STUDY_NAME" property="studyName"/>	
		<result column="PRICE" property="price"/>	
		<result column="STATUS_CHECK" property="statusCheck"/>	
		<result column="SCORE_AVG" property="score"/>	
	
	</resultMap>
	
	
	
	<select id="getTutorList" parameterType="map" resultMap ="tutorResultMap">
		
		SELECT MF.RNUM
		       ,MF.member_no, MF.member_email, MF.member_name, MF.member_create_date, MF.member_point, MF.member_country
		       ,MF.member_gender
		       ,MF.grade_name
		       ,MF.price, MF.study_name
		       ,MF.original_file_name
		       ,MF.score_avg
		FROM (
		        SELECT ROWNUM RNUM
		                ,M.member_no, M.member_email, M.member_name, M.member_create_date, M.member_point, M.member_country, 						M.member_gender
		                ,M.grade_name
		                ,M.price, M.study_name
		                ,M.original_file_name
		                ,M.score_avg
		        FROM(
			            select m.member_no, m.member_email, m.member_name, m.member_create_date, m.member_point, m.member_country, 								m.member_gender
			                ,g.grade_name
			                ,t.price, t.study_name
			                ,f.original_file_name
			                ,s.score_avg
			            from member m, tutor_info t, file_profile_image f, member_grade g
			                ,(select t.tutor_no, floor(avg(nvl(e.score,0))) score_avg
			                  from tutor_info t left join EVALUATION e
			                  on t.tutor_no = e.tutor_no
			                  group by t.tutor_no) s
			            where m.member_no = t.tutor_no
			            and t.tutor_no = f.tutor_no
			            and m.member_grade = g.member_grade
			            and s.tutor_no = t.tutor_no
		            	<include refid="search"></include>
		            order by t.status_check asc, m.member_no desc
		          ) M
			) MF
		    WHERE MF.RNUM BETWEEN #{start} AND #{end}

	</select>
	
	<select id="tutorSelectTotalCount" parameterType ="map"
		resultType="Integer">
		
		select count(*)
		from member
		
	</select>

	<select id="tutorSelectCurPage" parameterType ="map"
		resultType="Integer">
		
		SELECT floor((rnum-1)/10)+1
        FROM (  SELECT ROWNUM RNUM
		                ,M.member_no, M.member_email, M.member_name, M.member_create_date, M.member_point, M.member_country
		                ,M.grade_name
		                ,M.price, M.study_name
		                ,M.original_file_name
		                ,M.score_avg
		        FROM(
			            select m.member_no, m.member_email, m.member_name, m.member_create_date, m.member_point, m.member_country
			                ,g.grade_name
			                ,t.price, t.study_name
			                ,f.original_file_name
			                ,s.score_avg
			            from member m, tutor_info t, file_profile_image f, member_grade g
			                ,(select t.tutor_no, floor(avg(nvl(e.score,0))) score_avg
			                  from tutor_info t left join EVALUATION e
			                  on t.tutor_no = e.tutor_no
			                  group by t.tutor_no) s
			            where m.member_no = t.tutor_no
			            and t.tutor_no = f.tutor_no
			            and m.member_grade = g.member_grade
			            and s.tutor_no = t.tutor_no
		            <include refid="search"></include>
		            order by t.status_check asc, m.member_no desc
		          ) M
			)
        where member_no = #{no}
		
	</select>
	
	
</mapper>




